// This file is auto-generated by @hey-api/openapi-ts

export type ApiServiceSetupStatus = {
  status: string
  msg: string
  payload: ServiceSetupStatus
}

export type AuthJWT = {
  token: string
}

export type BaseApiResp = {
  status: string
  msg: string
  payload: {
    [key: string]: unknown
  } | null
}

export type BasicInfo = {
  planet_name: string
  planet_desc: string
  planet_owner_username: string
  offline_mode: boolean
  mossy_network: boolean
}

export type Configuration = {
  statuses: StatusesConfig
  media_attachments: MediaAttachmentsConfig
  polls: PollsConfig
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type InstanceV1 = {
  uri: string
  title: string
  short_description: string
  description: string
  email: string
  version: string
  urls: StreamingAPI
  stats: Stats
  thumbnail: ThumbnailV1 | null
  languages: Array<string>
  registrations: boolean
  approval_required: boolean
  invites_enabled: boolean
  configuration: Configuration
  contact_account: string | null
  rules: Array<Rule>
}

export type MediaAttachmentsConfig = {
  supported_mime_types: Array<string>
  image_size_limit: number
  image_matrix_limit: number
  video_size_limit: number
  video_frame_rate_limit: number
  video_matrix_limit: number
}

export type NodeInfo = {
  links: Array<NodeinfoLinks>
}

export type NodeInfo2dot0 = {
  version?: string
  software: Software2dot0
  protocols: Array<string>
  services: ServiceLists2dot0
  open_registrations: boolean
  usage: UsageStats2dot0
  metadata?: {
    [key: string]: string | null
  }
}

export type NodeInfo2dot1 = {
  version?: string
  software: Software2dot1
  protocols: Array<string>
  services: ServiceLists2dot1
  open_registrations: boolean
  usage: UsageStats2dot1
  metadata?: {
    [key: string]: string | null
  }
}

export type NodeinfoLinks = {
  rel: string
  href: string
}

export type PollsConfig = {
  max_options: number
  max_characters_per_option: number
  min_expiration: number
  max_expiration: number
}

export type Rule = {
  id: string
  text: string
}

export type ServiceLists2dot0 = {
  /**
   * Sites for inbound service connections
   */
  inbound?: Array<string>
  /**
   * Sites for outbound service connections
   */
  outbound?: Array<string>
}

export type ServiceLists2dot1 = {
  /**
   * Sites for inbound service connections
   */
  inbound?: Array<string>
  /**
   * Sites for outbound service connections
   */
  outbound?: Array<string>
}

export type ServiceSetupStatus = {
  status: string
}

export type Software2dot0 = {
  name: string
  version: string
}

export type Software2dot1 = {
  name: string
  version: string
  /**
   * URL of the source code repository
   */
  repository: string
  /**
   * URL of the homepage
   */
  homepage: string
}

export type Stats = {
  user_count: number
  status_count: number
  domain_count: number
}

export type StatusesConfig = {
  max_characters: number
  max_media_attachments: number
  characters_reserved_per_url: number
}

export type StreamingAPI = {
  streaming_api: string
}

export type ThumbnailV1 = {
  url: string | null
}

export type UsageStats2dot0 = {
  users: UserStats2dot0
  localPosts: number | null
  localComments: number | null
}

export type UsageStats2dot1 = {
  users: UserStats2dot1
  localPosts: number | null
  localComments: number | null
}

export type User = {
  username: string
}

export type UserStats2dot0 = {
  total: number
  activeHalfyear: number | null
  activeMonth: number | null
}

export type UserStats2dot1 = {
  total: number
  activeHalfyear: number | null
  activeMonth: number | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type WebauthnReg = {
  status: string
  msg: string
  payload: {
    [key: string]: unknown
  } | null
}

export type FrontendPagesGetResponse = unknown

export type FrontendPagesTestGetResponse = unknown

export type StartRegistrationApiM1AuthGenerateRegistrationOptionsPostData = {
  requestBody: User
}

export type StartRegistrationApiM1AuthGenerateRegistrationOptionsPostResponse = WebauthnReg

export type AfterRegistrationApiM1AuthVerifyRegistrationPostData = {
  requestBody: {
    [key: string]: unknown
  }
}

export type AfterRegistrationApiM1AuthVerifyRegistrationPostResponse = WebauthnReg

export type StartAuthenticationApiM1AuthGenerateAuthenticationOptionsPostResponse = WebauthnReg

export type AfterAuthenticationApiM1AuthVerifyAuthenticationPostData = {
  requestBody: {
    [key: string]: unknown
  }
}

export type AfterAuthenticationApiM1AuthVerifyAuthenticationPostResponse = WebauthnReg

export type CheckJwtApiM1AuthVerifyJwtPostData = {
  requestBody: AuthJWT
}

export type CheckJwtApiM1AuthVerifyJwtPostResponse = WebauthnReg

export type FetchInstanceApiV1InstanceGetResponse = InstanceV1

export type WebfingerWellKnownWebfingerGetData = {
  resource: string
}

export type WebfingerWellKnownWebfingerGetResponse = unknown

export type NodeinfoWellKnownNodeinfoGetResponse = NodeInfo

export type FetchNodeinfoV21Nodeinfo21GetResponse = NodeInfo2dot1

export type FetchNodeinfoV20Nodeinfo20GetResponse = NodeInfo2dot0

export type SetupStatusSetupStatusPostResponse = ApiServiceSetupStatus

export type SetupStatusSetupInitPostData = {
  requestBody: BasicInfo
}

export type SetupStatusSetupInitPostResponse = BaseApiResp

export type $OpenApiTs = {
  '/': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown
      }
    }
  }
  '/test': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: unknown
      }
    }
  }
  '/api/m1/auth/generate-registration-options': {
    post: {
      req: {
        requestBody: User
      }
      res: {
        /**
         * Successful Response
         */
        200: WebauthnReg
        /**
         * Validation Error
         */
        422: HTTPValidationError
      }
    }
  }
  '/api/m1/auth/verify-registration': {
    post: {
      req: {
        requestBody: {
          [key: string]: unknown
        }
      }
      res: {
        /**
         * Successful Response
         */
        200: WebauthnReg
        /**
         * Validation Error
         */
        422: HTTPValidationError
      }
    }
  }
  '/api/m1/auth/generate-authentication-options': {
    post: {
      res: {
        /**
         * Successful Response
         */
        200: WebauthnReg
      }
    }
  }
  '/api/m1/auth/verify-authentication': {
    post: {
      req: {
        requestBody: {
          [key: string]: unknown
        }
      }
      res: {
        /**
         * Successful Response
         */
        200: WebauthnReg
        /**
         * Validation Error
         */
        422: HTTPValidationError
      }
    }
  }
  '/api/m1/auth/verify-jwt': {
    post: {
      req: {
        requestBody: AuthJWT
      }
      res: {
        /**
         * Successful Response
         */
        200: WebauthnReg
        /**
         * Validation Error
         */
        422: HTTPValidationError
      }
    }
  }
  '/api/v1/instance': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: InstanceV1
      }
    }
  }
  '/.well-known/webfinger': {
    get: {
      req: {
        resource: string
      }
      res: {
        /**
         * Successful Response
         */
        200: unknown
        /**
         * Validation Error
         */
        422: HTTPValidationError
      }
    }
  }
  '/.well-known/nodeinfo': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: NodeInfo
      }
    }
  }
  '/nodeinfo/2.1': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: NodeInfo2dot1
      }
    }
  }
  '/nodeinfo/2.0': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: NodeInfo2dot0
      }
    }
  }
  '/setup/status': {
    post: {
      res: {
        /**
         * Successful Response
         */
        200: ApiServiceSetupStatus
      }
    }
  }
  '/setup/init': {
    post: {
      req: {
        requestBody: BasicInfo
      }
      res: {
        /**
         * Successful Response
         */
        200: BaseApiResp
        /**
         * Validation Error
         */
        422: HTTPValidationError
      }
    }
  }
}
