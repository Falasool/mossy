// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise'
import { OpenAPI } from './core/OpenAPI'
import { request as __request } from './core/request'
import type {
  FrontendPagesGetResponse,
  FrontendPagesTestGetResponse,
  StartRegistrationApiM1AuthGenerateRegistrationOptionsPostData,
  StartRegistrationApiM1AuthGenerateRegistrationOptionsPostResponse,
  AfterRegistrationApiM1AuthVerifyRegistrationPostData,
  AfterRegistrationApiM1AuthVerifyRegistrationPostResponse,
  StartAuthenticationApiM1AuthGenerateAuthenticationOptionsPostResponse,
  AfterAuthenticationApiM1AuthVerifyAuthenticationPostData,
  AfterAuthenticationApiM1AuthVerifyAuthenticationPostResponse,
  CheckJwtApiM1AuthVerifyJwtPostData,
  CheckJwtApiM1AuthVerifyJwtPostResponse,
  FetchInstanceApiV1InstanceGetResponse,
  WebfingerWellKnownWebfingerGetData,
  WebfingerWellKnownWebfingerGetResponse,
  NodeinfoWellKnownNodeinfoGetResponse,
  FetchNodeinfoV21Nodeinfo21GetResponse,
  FetchNodeinfoV20Nodeinfo20GetResponse,
  SetupStatusSetupStatusPostResponse,
  SetupStatusSetupInitPostData,
  SetupStatusSetupInitPostResponse
} from './types.gen'

export class DefaultService {
  /**
   * Frontend Pages
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static frontendPagesGet(): CancelablePromise<FrontendPagesGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/'
    })
  }

  /**
   * Frontend Pages
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static frontendPagesTestGet(): CancelablePromise<FrontendPagesTestGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/test'
    })
  }
}

export class ApiService {
  /**
   * Start Registration
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static startRegistrationApiM1AuthGenerateRegistrationOptionsPost(
    data: StartRegistrationApiM1AuthGenerateRegistrationOptionsPostData
  ): CancelablePromise<StartRegistrationApiM1AuthGenerateRegistrationOptionsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/generate-registration-options',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * After Registration
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static afterRegistrationApiM1AuthVerifyRegistrationPost(
    data: AfterRegistrationApiM1AuthVerifyRegistrationPostData
  ): CancelablePromise<AfterRegistrationApiM1AuthVerifyRegistrationPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-registration',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * Start Authentication
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static startAuthenticationApiM1AuthGenerateAuthenticationOptionsPost(): CancelablePromise<StartAuthenticationApiM1AuthGenerateAuthenticationOptionsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/generate-authentication-options'
    })
  }

  /**
   * After Authentication
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static afterAuthenticationApiM1AuthVerifyAuthenticationPost(
    data: AfterAuthenticationApiM1AuthVerifyAuthenticationPostData
  ): CancelablePromise<AfterAuthenticationApiM1AuthVerifyAuthenticationPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-authentication',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * Check Jwt
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static checkJwtApiM1AuthVerifyJwtPost(
    data: CheckJwtApiM1AuthVerifyJwtPostData
  ): CancelablePromise<CheckJwtApiM1AuthVerifyJwtPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-jwt',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * @deprecated
   * Fetch Instance
   * @returns InstanceV1 Successful Response
   * @throws ApiError
   */
  public static fetchInstanceApiV1InstanceGet(): CancelablePromise<FetchInstanceApiV1InstanceGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/instance'
    })
  }
}

export class M1Service {
  /**
   * Start Registration
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static startRegistrationApiM1AuthGenerateRegistrationOptionsPost(
    data: StartRegistrationApiM1AuthGenerateRegistrationOptionsPostData
  ): CancelablePromise<StartRegistrationApiM1AuthGenerateRegistrationOptionsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/generate-registration-options',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * After Registration
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static afterRegistrationApiM1AuthVerifyRegistrationPost(
    data: AfterRegistrationApiM1AuthVerifyRegistrationPostData
  ): CancelablePromise<AfterRegistrationApiM1AuthVerifyRegistrationPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-registration',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * Start Authentication
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static startAuthenticationApiM1AuthGenerateAuthenticationOptionsPost(): CancelablePromise<StartAuthenticationApiM1AuthGenerateAuthenticationOptionsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/generate-authentication-options'
    })
  }

  /**
   * After Authentication
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static afterAuthenticationApiM1AuthVerifyAuthenticationPost(
    data: AfterAuthenticationApiM1AuthVerifyAuthenticationPostData
  ): CancelablePromise<AfterAuthenticationApiM1AuthVerifyAuthenticationPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-authentication',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * Check Jwt
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static checkJwtApiM1AuthVerifyJwtPost(
    data: CheckJwtApiM1AuthVerifyJwtPostData
  ): CancelablePromise<CheckJwtApiM1AuthVerifyJwtPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-jwt',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }
}

export class AuthenticationService {
  /**
   * Start Registration
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static startRegistrationApiM1AuthGenerateRegistrationOptionsPost(
    data: StartRegistrationApiM1AuthGenerateRegistrationOptionsPostData
  ): CancelablePromise<StartRegistrationApiM1AuthGenerateRegistrationOptionsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/generate-registration-options',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * After Registration
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static afterRegistrationApiM1AuthVerifyRegistrationPost(
    data: AfterRegistrationApiM1AuthVerifyRegistrationPostData
  ): CancelablePromise<AfterRegistrationApiM1AuthVerifyRegistrationPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-registration',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * Start Authentication
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static startAuthenticationApiM1AuthGenerateAuthenticationOptionsPost(): CancelablePromise<StartAuthenticationApiM1AuthGenerateAuthenticationOptionsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/generate-authentication-options'
    })
  }

  /**
   * After Authentication
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static afterAuthenticationApiM1AuthVerifyAuthenticationPost(
    data: AfterAuthenticationApiM1AuthVerifyAuthenticationPostData
  ): CancelablePromise<AfterAuthenticationApiM1AuthVerifyAuthenticationPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-authentication',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * Check Jwt
   * @param data The data for the request.
   * @param data.requestBody
   * @returns WebauthnReg Successful Response
   * @throws ApiError
   */
  public static checkJwtApiM1AuthVerifyJwtPost(
    data: CheckJwtApiM1AuthVerifyJwtPostData
  ): CancelablePromise<CheckJwtApiM1AuthVerifyJwtPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/m1/auth/verify-jwt',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }
}

export class V1Service {
  /**
   * @deprecated
   * Fetch Instance
   * @returns InstanceV1 Successful Response
   * @throws ApiError
   */
  public static fetchInstanceApiV1InstanceGet(): CancelablePromise<FetchInstanceApiV1InstanceGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/v1/instance'
    })
  }
}

export class WellKnownService {
  /**
   * Webfinger
   * @param data The data for the request.
   * @param data.resource
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static webfingerWellKnownWebfingerGet(
    data: WebfingerWellKnownWebfingerGetData
  ): CancelablePromise<WebfingerWellKnownWebfingerGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/.well-known/webfinger',
      query: {
        resource: data.resource
      },
      errors: {
        422: 'Validation Error'
      }
    })
  }

  /**
   * Nodeinfo
   * @returns NodeInfo Successful Response
   * @throws ApiError
   */
  public static nodeinfoWellKnownNodeinfoGet(): CancelablePromise<NodeinfoWellKnownNodeinfoGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/.well-known/nodeinfo'
    })
  }
}

export class WebfingerService {
  /**
   * Webfinger
   * @param data The data for the request.
   * @param data.resource
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static webfingerWellKnownWebfingerGet(
    data: WebfingerWellKnownWebfingerGetData
  ): CancelablePromise<WebfingerWellKnownWebfingerGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/.well-known/webfinger',
      query: {
        resource: data.resource
      },
      errors: {
        422: 'Validation Error'
      }
    })
  }
}

export class NodeinfoService {
  /**
   * Nodeinfo
   * @returns NodeInfo Successful Response
   * @throws ApiError
   */
  public static nodeinfoWellKnownNodeinfoGet(): CancelablePromise<NodeinfoWellKnownNodeinfoGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/.well-known/nodeinfo'
    })
  }

  /**
   * Fetch Nodeinfo V2 1
   * @returns NodeInfo2dot1 Successful Response
   * @throws ApiError
   */
  public static fetchNodeinfoV21Nodeinfo21Get(): CancelablePromise<FetchNodeinfoV21Nodeinfo21GetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/nodeinfo/2.1'
    })
  }

  /**
   * Fetch Nodeinfo V2 0
   * @returns NodeInfo2dot0 Successful Response
   * @throws ApiError
   */
  public static fetchNodeinfoV20Nodeinfo20Get(): CancelablePromise<FetchNodeinfoV20Nodeinfo20GetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/nodeinfo/2.0'
    })
  }
}

export class MossySetupService {
  /**
   * Setup Status
   * @returns ApiServiceSetupStatus Successful Response
   * @throws ApiError
   */
  public static setupStatusSetupStatusPost(): CancelablePromise<SetupStatusSetupStatusPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/setup/status'
    })
  }

  /**
   * Setup Status
   * @param data The data for the request.
   * @param data.requestBody
   * @returns BaseApiResp Successful Response
   * @throws ApiError
   */
  public static setupStatusSetupInitPost(
    data: SetupStatusSetupInitPostData
  ): CancelablePromise<SetupStatusSetupInitPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/setup/init',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error'
      }
    })
  }
}
