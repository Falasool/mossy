// This file is auto-generated by @hey-api/openapi-ts

export const $ApiServiceSetupStatus = {
  properties: {
    status: {
      type: 'string',
      title: 'Status'
    },
    msg: {
      type: 'string',
      title: 'Msg'
    },
    payload: {
      $ref: '#/components/schemas/ServiceSetupStatus'
    }
  },
  type: 'object',
  required: ['status', 'msg', 'payload'],
  title: 'ApiServiceSetupStatus'
} as const

export const $AuthJWT = {
  properties: {
    token: {
      type: 'string',
      title: 'Token'
    }
  },
  type: 'object',
  required: ['token'],
  title: 'AuthJWT'
} as const

export const $BaseApiResp = {
  properties: {
    status: {
      type: 'string',
      title: 'Status'
    },
    msg: {
      type: 'string',
      title: 'Msg'
    },
    payload: {
      anyOf: [
        {
          type: 'object'
        },
        {
          type: 'null'
        }
      ],
      title: 'Payload'
    }
  },
  type: 'object',
  required: ['status', 'msg', 'payload'],
  title: 'BaseApiResp'
} as const

export const $BasicInfo = {
  properties: {
    planet_name: {
      type: 'string',
      title: 'Planet Name'
    },
    planet_desc: {
      type: 'string',
      title: 'Planet Desc'
    },
    planet_owner_username: {
      type: 'string',
      title: 'Planet Owner Username'
    },
    offline_mode: {
      type: 'boolean',
      title: 'Offline Mode'
    },
    mossy_network: {
      type: 'boolean',
      title: 'Mossy Network'
    }
  },
  type: 'object',
  required: [
    'planet_name',
    'planet_desc',
    'planet_owner_username',
    'offline_mode',
    'mossy_network'
  ],
  title: 'BasicInfo'
} as const

export const $Configuration = {
  properties: {
    statuses: {
      $ref: '#/components/schemas/StatusesConfig'
    },
    media_attachments: {
      $ref: '#/components/schemas/MediaAttachmentsConfig'
    },
    polls: {
      $ref: '#/components/schemas/PollsConfig'
    }
  },
  type: 'object',
  required: ['statuses', 'media_attachments', 'polls'],
  title: 'Configuration'
} as const

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError'
      },
      type: 'array',
      title: 'Detail'
    }
  },
  type: 'object',
  title: 'HTTPValidationError'
} as const

export const $InstanceV1 = {
  properties: {
    uri: {
      type: 'string',
      title: 'Uri'
    },
    title: {
      type: 'string',
      title: 'Title'
    },
    short_description: {
      type: 'string',
      title: 'Short Description'
    },
    description: {
      type: 'string',
      title: 'Description'
    },
    email: {
      type: 'string',
      title: 'Email'
    },
    version: {
      type: 'string',
      title: 'Version'
    },
    urls: {
      $ref: '#/components/schemas/StreamingAPI'
    },
    stats: {
      $ref: '#/components/schemas/Stats'
    },
    thumbnail: {
      anyOf: [
        {
          $ref: '#/components/schemas/ThumbnailV1'
        },
        {
          type: 'null'
        }
      ]
    },
    languages: {
      items: {
        type: 'string'
      },
      type: 'array',
      title: 'Languages'
    },
    registrations: {
      type: 'boolean',
      title: 'Registrations'
    },
    approval_required: {
      type: 'boolean',
      title: 'Approval Required'
    },
    invites_enabled: {
      type: 'boolean',
      title: 'Invites Enabled'
    },
    configuration: {
      $ref: '#/components/schemas/Configuration'
    },
    contact_account: {
      anyOf: [
        {
          type: 'string'
        },
        {
          type: 'null'
        }
      ],
      title: 'Contact Account'
    },
    rules: {
      items: {
        $ref: '#/components/schemas/Rule'
      },
      type: 'array',
      title: 'Rules'
    }
  },
  type: 'object',
  required: [
    'uri',
    'title',
    'short_description',
    'description',
    'email',
    'version',
    'urls',
    'stats',
    'thumbnail',
    'languages',
    'registrations',
    'approval_required',
    'invites_enabled',
    'configuration',
    'contact_account',
    'rules'
  ],
  title: 'InstanceV1'
} as const

export const $MediaAttachmentsConfig = {
  properties: {
    supported_mime_types: {
      items: {
        type: 'string'
      },
      type: 'array',
      title: 'Supported Mime Types'
    },
    image_size_limit: {
      type: 'integer',
      title: 'Image Size Limit'
    },
    image_matrix_limit: {
      type: 'integer',
      title: 'Image Matrix Limit'
    },
    video_size_limit: {
      type: 'integer',
      title: 'Video Size Limit'
    },
    video_frame_rate_limit: {
      type: 'integer',
      title: 'Video Frame Rate Limit'
    },
    video_matrix_limit: {
      type: 'integer',
      title: 'Video Matrix Limit'
    }
  },
  type: 'object',
  required: [
    'supported_mime_types',
    'image_size_limit',
    'image_matrix_limit',
    'video_size_limit',
    'video_frame_rate_limit',
    'video_matrix_limit'
  ],
  title: 'MediaAttachmentsConfig'
} as const

export const $NodeInfo = {
  properties: {
    links: {
      items: {
        $ref: '#/components/schemas/NodeinfoLinks'
      },
      type: 'array',
      title: 'Links'
    }
  },
  type: 'object',
  required: ['links'],
  title: 'NodeInfo'
} as const

export const $NodeInfo2dot0 = {
  properties: {
    version: {
      type: 'string',
      title: 'Version',
      default: '2.0'
    },
    software: {
      $ref: '#/components/schemas/Software2dot0'
    },
    protocols: {
      items: {
        type: 'string'
      },
      type: 'array',
      title: 'Protocols'
    },
    services: {
      $ref: '#/components/schemas/ServiceLists2dot0'
    },
    open_registrations: {
      type: 'boolean',
      title: 'Open Registrations'
    },
    usage: {
      $ref: '#/components/schemas/UsageStats2dot0'
    },
    metadata: {
      additionalProperties: {
        anyOf: [
          {
            type: 'string'
          },
          {
            type: 'null'
          }
        ]
      },
      type: 'object',
      title: 'Metadata'
    }
  },
  type: 'object',
  required: ['software', 'protocols', 'services', 'open_registrations', 'usage'],
  title: 'NodeInfo2dot0'
} as const

export const $NodeInfo2dot1 = {
  properties: {
    version: {
      type: 'string',
      title: 'Version',
      default: '2.1'
    },
    software: {
      $ref: '#/components/schemas/Software2dot1'
    },
    protocols: {
      items: {
        type: 'string'
      },
      type: 'array',
      title: 'Protocols'
    },
    services: {
      $ref: '#/components/schemas/ServiceLists2dot1'
    },
    open_registrations: {
      type: 'boolean',
      title: 'Open Registrations'
    },
    usage: {
      $ref: '#/components/schemas/UsageStats2dot1'
    },
    metadata: {
      additionalProperties: {
        anyOf: [
          {
            type: 'string'
          },
          {
            type: 'null'
          }
        ]
      },
      type: 'object',
      title: 'Metadata'
    }
  },
  type: 'object',
  required: ['software', 'protocols', 'services', 'open_registrations', 'usage'],
  title: 'NodeInfo2dot1'
} as const

export const $NodeinfoLinks = {
  properties: {
    rel: {
      type: 'string',
      title: 'Rel'
    },
    href: {
      type: 'string',
      title: 'Href'
    }
  },
  type: 'object',
  required: ['rel', 'href'],
  title: 'NodeinfoLinks'
} as const

export const $PollsConfig = {
  properties: {
    max_options: {
      type: 'integer',
      title: 'Max Options'
    },
    max_characters_per_option: {
      type: 'integer',
      title: 'Max Characters Per Option'
    },
    min_expiration: {
      type: 'integer',
      title: 'Min Expiration'
    },
    max_expiration: {
      type: 'integer',
      title: 'Max Expiration'
    }
  },
  type: 'object',
  required: ['max_options', 'max_characters_per_option', 'min_expiration', 'max_expiration'],
  title: 'PollsConfig'
} as const

export const $Rule = {
  properties: {
    id: {
      type: 'string',
      title: 'Id'
    },
    text: {
      type: 'string',
      title: 'Text'
    }
  },
  type: 'object',
  required: ['id', 'text'],
  title: 'Rule'
} as const

export const $ServiceLists2dot0 = {
  properties: {
    inbound: {
      items: {
        type: 'string'
      },
      type: 'array',
      title: 'Inbound',
      description: 'Sites for inbound service connections'
    },
    outbound: {
      items: {
        type: 'string'
      },
      type: 'array',
      title: 'Outbound',
      description: 'Sites for outbound service connections'
    }
  },
  type: 'object',
  title: 'ServiceLists2dot0'
} as const

export const $ServiceLists2dot1 = {
  properties: {
    inbound: {
      items: {
        type: 'string'
      },
      type: 'array',
      title: 'Inbound',
      description: 'Sites for inbound service connections'
    },
    outbound: {
      items: {
        type: 'string'
      },
      type: 'array',
      title: 'Outbound',
      description: 'Sites for outbound service connections'
    }
  },
  type: 'object',
  title: 'ServiceLists2dot1'
} as const

export const $ServiceSetupStatus = {
  properties: {
    status: {
      type: 'string',
      title: 'Status'
    }
  },
  type: 'object',
  required: ['status'],
  title: 'ServiceSetupStatus'
} as const

export const $Software2dot0 = {
  properties: {
    name: {
      type: 'string',
      pattern: '^[a-z0-9-]+$',
      title: 'Name'
    },
    version: {
      type: 'string',
      title: 'Version'
    }
  },
  type: 'object',
  required: ['name', 'version'],
  title: 'Software2dot0'
} as const

export const $Software2dot1 = {
  properties: {
    name: {
      type: 'string',
      pattern: '^[a-z0-9-]+$',
      title: 'Name'
    },
    version: {
      type: 'string',
      title: 'Version'
    },
    repository: {
      type: 'string',
      title: 'Repository',
      description: 'URL of the source code repository'
    },
    homepage: {
      type: 'string',
      title: 'Homepage',
      description: 'URL of the homepage'
    }
  },
  type: 'object',
  required: ['name', 'version', 'repository', 'homepage'],
  title: 'Software2dot1'
} as const

export const $Stats = {
  properties: {
    user_count: {
      type: 'integer',
      title: 'User Count'
    },
    status_count: {
      type: 'integer',
      title: 'Status Count'
    },
    domain_count: {
      type: 'integer',
      title: 'Domain Count'
    }
  },
  type: 'object',
  required: ['user_count', 'status_count', 'domain_count'],
  title: 'Stats'
} as const

export const $StatusesConfig = {
  properties: {
    max_characters: {
      type: 'integer',
      title: 'Max Characters'
    },
    max_media_attachments: {
      type: 'integer',
      title: 'Max Media Attachments'
    },
    characters_reserved_per_url: {
      type: 'integer',
      title: 'Characters Reserved Per Url'
    }
  },
  type: 'object',
  required: ['max_characters', 'max_media_attachments', 'characters_reserved_per_url'],
  title: 'StatusesConfig'
} as const

export const $StreamingAPI = {
  properties: {
    streaming_api: {
      type: 'string',
      minLength: 1,
      format: 'uri',
      title: 'Streaming Api'
    }
  },
  type: 'object',
  required: ['streaming_api'],
  title: 'StreamingAPI'
} as const

export const $ThumbnailV1 = {
  properties: {
    url: {
      anyOf: [
        {
          type: 'string',
          maxLength: 2083,
          minLength: 1,
          format: 'uri'
        },
        {
          type: 'null'
        }
      ],
      title: 'Url'
    }
  },
  type: 'object',
  required: ['url'],
  title: 'ThumbnailV1'
} as const

export const $UsageStats2dot0 = {
  properties: {
    users: {
      $ref: '#/components/schemas/UserStats2dot0'
    },
    localPosts: {
      anyOf: [
        {
          type: 'integer',
          minimum: 0
        },
        {
          type: 'null'
        }
      ],
      title: 'Localposts'
    },
    localComments: {
      anyOf: [
        {
          type: 'integer',
          minimum: 0
        },
        {
          type: 'null'
        }
      ],
      title: 'Localcomments'
    }
  },
  type: 'object',
  required: ['users', 'localPosts', 'localComments'],
  title: 'UsageStats2dot0'
} as const

export const $UsageStats2dot1 = {
  properties: {
    users: {
      $ref: '#/components/schemas/UserStats2dot1'
    },
    localPosts: {
      anyOf: [
        {
          type: 'integer',
          minimum: 0
        },
        {
          type: 'null'
        }
      ],
      title: 'Localposts'
    },
    localComments: {
      anyOf: [
        {
          type: 'integer',
          minimum: 0
        },
        {
          type: 'null'
        }
      ],
      title: 'Localcomments'
    }
  },
  type: 'object',
  required: ['users', 'localPosts', 'localComments'],
  title: 'UsageStats2dot1'
} as const

export const $User = {
  properties: {
    username: {
      type: 'string',
      maxLength: 16,
      minLength: 3,
      pattern: '^[a-zA-Z0-9_-]+$',
      title: 'Username'
    }
  },
  type: 'object',
  required: ['username'],
  title: 'User'
} as const

export const $UserStats2dot0 = {
  properties: {
    total: {
      type: 'integer',
      minimum: 0,
      title: 'Total'
    },
    activeHalfyear: {
      anyOf: [
        {
          type: 'integer',
          minimum: 0
        },
        {
          type: 'null'
        }
      ],
      title: 'Activehalfyear'
    },
    activeMonth: {
      anyOf: [
        {
          type: 'integer',
          minimum: 0
        },
        {
          type: 'null'
        }
      ],
      title: 'Activemonth'
    }
  },
  type: 'object',
  required: ['total', 'activeHalfyear', 'activeMonth'],
  title: 'UserStats2dot0'
} as const

export const $UserStats2dot1 = {
  properties: {
    total: {
      type: 'integer',
      minimum: 0,
      title: 'Total'
    },
    activeHalfyear: {
      anyOf: [
        {
          type: 'integer',
          minimum: 0
        },
        {
          type: 'null'
        }
      ],
      title: 'Activehalfyear'
    },
    activeMonth: {
      anyOf: [
        {
          type: 'integer',
          minimum: 0
        },
        {
          type: 'null'
        }
      ],
      title: 'Activemonth'
    }
  },
  type: 'object',
  required: ['total', 'activeHalfyear', 'activeMonth'],
  title: 'UserStats2dot1'
} as const

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string'
          },
          {
            type: 'integer'
          }
        ]
      },
      type: 'array',
      title: 'Location'
    },
    msg: {
      type: 'string',
      title: 'Message'
    },
    type: {
      type: 'string',
      title: 'Error Type'
    }
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError'
} as const

export const $WebauthnReg = {
  properties: {
    status: {
      type: 'string',
      title: 'Status'
    },
    msg: {
      type: 'string',
      title: 'Msg'
    },
    payload: {
      anyOf: [
        {
          type: 'object'
        },
        {
          type: 'null'
        }
      ],
      title: 'Payload'
    }
  },
  type: 'object',
  required: ['status', 'msg', 'payload'],
  title: 'WebauthnReg'
} as const
